{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyACI","text":"<p>scrapli -- scrap(e c)li --  is a python library focused on connecting to devices, specifically network devices  (routers/switches/firewalls/etc.) via SSH or Telnet. The name scrapli -- is just \"scrape cli\" (as in screen scrape)  squished together! scrapli's goal is to be as fast and flexible as possible, while providing a thoroughly tested, well   typed, well documented, simple API that supports both synchronous and asynchronous usage.</p> <p>Feel free to join the very awesome networktocode slack workspace here, where you  will find a <code>scrapli</code> channel where you can discuss anything about scrapli, as well as tons of other channels covering   all sorts of network/network-automation topics!</p>"},{"location":"about/contributing/","title":"Contributing","text":"<p>Thanks for thinking about contributing! Contributions are not expected, but are quite welcome.</p> <p>Contributions of all kinds are welcomed -- typos, doc updates, adding examples, bug fixes, and feature adds.</p> <p>Some notes on contributing:</p> <ul> <li>Please open a GitHub discussion topic for any potential feature adds/changes to discuss them prior to opening a PR,   this way everyone has a chance to chime in and make sure we're all on the same page!</li> <li>Please open an issue to discuss any bugs/bug fixes prior to opening a PR.</li> <li>Once we all have discussed any adds/changes, pull requests are very much welcome and appreciated!</li> <li>All PRs should pass tests/CI linting -- checkout the Makefile for some shortcuts for linting and testing.</li> <li>Please include tests! Even simple/basic tests are better than nothing -- it helps make sure changes in the future    don't break functionality or make things act in unexpected ways!</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>core<ul> <li>query</li> </ul> </li> </ul>"},{"location":"reference/core/","title":"core","text":""},{"location":"reference/core/query/","title":"query","text":""},{"location":"reference/core/query/#core.query.Request","title":"<code>Request</code>","text":"<p>Creates requests to the ACI API.</p> <p>Responsible for building the url and making the HTTP(S) requests to ACI's API.</p>"},{"location":"reference/core/query/#core.query.Request--parameters","title":"Parameters","text":"<ul> <li>base (str): Base URL passed in api() instantiation.</li> <li>filters (dict, optional): Contains key/value pairs that     correlate to the filters a given endpoint accepts.     In (e.g. /api/dcim/devices/?name='test') 'name': 'test'     would be in the filters dict.</li> </ul> Source code in <code>pyaci/core/query.py</code> <pre><code>class Request:\n    \"\"\"Creates requests to the ACI API.\n\n    Responsible for building the url and making the HTTP(S) requests to\n    ACI's API.\n\n    ## Parameters\n\n    * **base** (str): Base URL passed in api() instantiation.\n    * **filters** (dict, optional): Contains key/value pairs that\n        correlate to the filters a given endpoint accepts.\n        In (e.g. /api/dcim/devices/?name='test') 'name': 'test'\n        would be in the filters dict.\n    \"\"\"\n\n    def __init__(\n        self,\n        base,\n        http_session,\n        filters=None,\n        limit=None,\n        offset=None,\n        key=None,\n        token=None,\n        threading=False,\n    ):\n        \"\"\"Instantiates a new Request object.\n\n        ## Parameters\n\n        * **base** (string): Base URL passed in api() instantiation.\n        * **filters** (dict, optional): Contains key/value pairs that\n            correlate to the filters a given endpoint accepts.\n            In (e.g. /api/dcim/devices/?name='test') 'name': 'test'\n            would be in the filters dict.\n        * **key** (int, optional): Database id of the item being queried.\n        \"\"\"\n        self.base = self.normalize_url(base)\n        self.filters = filters or None\n        self.key = key\n        self.token = token\n        self.http_session = http_session\n        self.url = self.base if not key else \"{}{}/\".format(self.base, key)\n        self.threading = threading\n        self.limit = limit\n        self.offset = offset\n    def get_openapi(self):\n        \"\"\"Gets the OpenAPI Spec.\"\"\"\n        headers = {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n        }\n\n        current_version = version.parse(self.get_version())\n        if current_version &gt;= version.parse(\"3.5\"):\n            req = self.http_session.get(\n                \"{}schema/\".format(self.normalize_url(self.base)),\n                headers=headers,\n            )\n        else:\n            req = self.http_session.get(\n                \"{}docs/?format=openapi\".format(self.normalize_url(self.base)),\n                headers=headers,\n            )\n\n        if req.ok:\n            return req.json()\n        else:\n            raise Exception(req.text)\n</code></pre>"},{"location":"reference/core/query/#core.query.Request.__init__","title":"<code>__init__(base, http_session, filters=None, limit=None, offset=None, key=None, token=None, threading=False)</code>","text":"<p>Instantiates a new Request object.</p>"},{"location":"reference/core/query/#core.query.Request.__init__--parameters","title":"Parameters","text":"<ul> <li>base (string): Base URL passed in api() instantiation.</li> <li>filters (dict, optional): Contains key/value pairs that     correlate to the filters a given endpoint accepts.     In (e.g. /api/dcim/devices/?name='test') 'name': 'test'     would be in the filters dict.</li> <li>key (int, optional): Database id of the item being queried.</li> </ul> Source code in <code>pyaci/core/query.py</code> <pre><code>def __init__(\n    self,\n    base,\n    http_session,\n    filters=None,\n    limit=None,\n    offset=None,\n    key=None,\n    token=None,\n    threading=False,\n):\n    \"\"\"Instantiates a new Request object.\n\n    ## Parameters\n\n    * **base** (string): Base URL passed in api() instantiation.\n    * **filters** (dict, optional): Contains key/value pairs that\n        correlate to the filters a given endpoint accepts.\n        In (e.g. /api/dcim/devices/?name='test') 'name': 'test'\n        would be in the filters dict.\n    * **key** (int, optional): Database id of the item being queried.\n    \"\"\"\n    self.base = self.normalize_url(base)\n    self.filters = filters or None\n    self.key = key\n    self.token = token\n    self.http_session = http_session\n    self.url = self.base if not key else \"{}{}/\".format(self.base, key)\n    self.threading = threading\n    self.limit = limit\n    self.offset = offset\n</code></pre>"},{"location":"reference/core/query/#core.query.Request.get_openapi","title":"<code>get_openapi()</code>","text":"<p>Gets the OpenAPI Spec.</p> Source code in <code>pyaci/core/query.py</code> <pre><code>def get_openapi(self):\n    \"\"\"Gets the OpenAPI Spec.\"\"\"\n    headers = {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n    }\n\n    current_version = version.parse(self.get_version())\n    if current_version &gt;= version.parse(\"3.5\"):\n        req = self.http_session.get(\n            \"{}schema/\".format(self.normalize_url(self.base)),\n            headers=headers,\n        )\n    else:\n        req = self.http_session.get(\n            \"{}docs/?format=openapi\".format(self.normalize_url(self.base)),\n            headers=headers,\n        )\n\n    if req.ok:\n        return req.json()\n    else:\n        raise Exception(req.text)\n</code></pre>"},{"location":"user_guide/installation/","title":"Installation","text":""},{"location":"user_guide/installation/#standard-installation","title":"Standard Installation","text":"<p>As outlined in the quick start, you should be able to pip install scrapli \"normally\":</p> <pre><code>pip install scrapli\n</code></pre>"},{"location":"user_guide/installation/#installing-current-main-branch","title":"Installing current main branch","text":"<p>To install from the source repositories master branch:</p> <pre><code>pip install git+https://github.com/carlmontanari/scrapli\n</code></pre>"},{"location":"user_guide/installation/#installing-a-different-branch","title":"Installing a different branch","text":"<p>To install from a different branch of the source repository, for example from a branch named <code>develop</code>:</p> <pre><code>pip install -e git+https://github.com/carlmontanari/scrapli.git@develop#egg=scrapli\n</code></pre>"},{"location":"user_guide/installation/#installation-from-source","title":"Installation from Source","text":"<p>To install from source:</p> <pre><code>git clone https://github.com/carlmontanari/scrapli\ncd scrapli\npython setup.py install\n</code></pre>"},{"location":"user_guide/installation/#optional-extras","title":"Optional Extras","text":"<p>scrapli has made an effort to have as few dependencies as possible -- in fact to have ZERO dependencies! The \"core\" of  scrapli can run with nothing other than standard library! If for any reason you wish to use paramiko, ssh2-python,  or asyncssh as a transport, however, you of course need to install those. These \"extras\" can be installed via pip:</p> <pre><code>pip install scrapli[paramiko]\n</code></pre> <p>The available optional installation extras options are:</p> <ul> <li>paramiko</li> <li>ssh2</li> <li>asyncssh  </li> <li>textfsm (textfsm and ntc-templates)</li> <li>ttp (ttp template parser)  </li> <li>genie (genie/pyats)</li> <li>netconf (scrapli_netconf)</li> <li>community (scrapli_community)</li> </ul> <p>If you would like to install all optional extras, you can do so with the <code>full</code> option:</p> <pre><code>pip install scrapli[full]\n</code></pre>"},{"location":"user_guide/installation/#supported-platforms","title":"Supported Platforms","text":"<p>As for platforms to run scrapli on -- it has and will be tested on MacOS and Ubuntu regularly and should work on any  POSIX system. Windows at one point was being tested very minimally via GitHub Actions builds, however this is no   longer the case as it is just not worth the effort. While scrapli should work on Windows when using the paramiko or    ssh2-python transport drivers, it is not \"officially\" supported. It is strongly recommended/preferred for folks     to use WSL/Cygwin instead of Windows.</p>"},{"location":"user_guide/linting_testing/","title":"Installation","text":""},{"location":"user_guide/linting_testing/#standard-installation","title":"Standard Installation","text":"<p>As outlined in the quick start, you should be able to pip install scrapli \"normally\":</p> <pre><code>pip install scrapli\n</code></pre>"},{"location":"user_guide/linting_testing/#installing-current-main-branch","title":"Installing current main branch","text":"<p>To install from the source repositories master branch:</p> <pre><code>pip install git+https://github.com/carlmontanari/scrapli\n</code></pre>"},{"location":"user_guide/linting_testing/#installing-a-different-branch","title":"Installing a different branch","text":"<p>To install from a different branch of the source repository, for example from a branch named <code>develop</code>:</p> <pre><code>pip install -e git+https://github.com/carlmontanari/scrapli.git@develop#egg=scrapli\n</code></pre>"},{"location":"user_guide/linting_testing/#installation-from-source","title":"Installation from Source","text":"<p>To install from source:</p> <pre><code>git clone https://github.com/carlmontanari/scrapli\ncd scrapli\npython setup.py install\n</code></pre>"},{"location":"user_guide/linting_testing/#optional-extras","title":"Optional Extras","text":"<p>scrapli has made an effort to have as few dependencies as possible -- in fact to have ZERO dependencies! The \"core\" of  scrapli can run with nothing other than standard library! If for any reason you wish to use paramiko, ssh2-python,  or asyncssh as a transport, however, you of course need to install those. These \"extras\" can be installed via pip:</p> <pre><code>pip install scrapli[paramiko]\n</code></pre> <p>The available optional installation extras options are:</p> <ul> <li>paramiko</li> <li>ssh2</li> <li>asyncssh  </li> <li>textfsm (textfsm and ntc-templates)</li> <li>ttp (ttp template parser)  </li> <li>genie (genie/pyats)</li> <li>netconf (scrapli_netconf)</li> <li>community (scrapli_community)</li> </ul> <p>If you would like to install all optional extras, you can do so with the <code>full</code> option:</p> <pre><code>pip install scrapli[full]\n</code></pre>"},{"location":"user_guide/linting_testing/#supported-platforms","title":"Supported Platforms","text":"<p>As for platforms to run scrapli on -- it has and will be tested on MacOS and Ubuntu regularly and should work on any  POSIX system. Windows at one point was being tested very minimally via GitHub Actions builds, however this is no   longer the case as it is just not worth the effort. While scrapli should work on Windows when using the paramiko or    ssh2-python transport drivers, it is not \"officially\" supported. It is strongly recommended/preferred for folks     to use WSL/Cygwin instead of Windows.</p>"},{"location":"user_guide/quickstart/","title":"Quick Start Guide","text":""},{"location":"user_guide/quickstart/#installation","title":"Installation","text":"<p>In most cases installation via pip is the simplest and best way to install scrapli. See here for advanced installation details.</p> <pre><code>pip install scrapli\n</code></pre>"},{"location":"user_guide/quickstart/#a-simple-example","title":"A Simple Example","text":"<pre><code>from scrapli.driver.core import IOSXEDriver\n\nmy_device = {\n    \"host\": \"172.18.0.11\",\n    \"auth_username\": \"scrapli\",\n    \"auth_password\": \"scrapli\",\n    \"auth_strict_key\": False,\n}\n\nconn = IOSXEDriver(**my_device)\nconn.open()\nresponse = conn.send_command(\"show run\")\nprint(response.result)\n</code></pre> <pre><code>$ python my_scrapli_script.py\nBuilding configuration...\n\nCurrent configuration : 7584 bytes\n!\n! Last configuration change at 19:24:38 PST Sat Feb 29 2020 by carl\n! NVRAM config last updated at 19:00:28 PST Fri Feb 7 2020 by carl\n!\nversion 15.2\nservice nagle\nno service pad\nservice tcp-keepalives-in\nservice tcp-keepalives-out\nservice timestamps debug datetime msec\nno service password-encryption\n!\n&lt;SNIP&gt;\n!\nend\n</code></pre>"}]}